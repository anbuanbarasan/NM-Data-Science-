# -*- coding: utf-8 -*-
"""Untitled16.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jOAskVL7f6b1dWy6wRYovkSF29qcRlM5

new
"""

import pandas as pd

# Load datasets
movies = pd.read_csv('/content/movies.csv')
tags = pd.read_csv('/content/genome-tags.csv')
links = pd.read_csv('/content/links.csv')

import pandas as pd

# Load datasets
movies = pd.read_csv('/content/movies.csv')
tags = pd.read_csv('/content/genome-tags.csv')
links = pd.read_csv('/content/links.csv')

# Display first 5 rows of each in CSV format
print("----- movies.csv -----")
print(movies.head().to_csv(index=False))

print("----- genome-tags.csv -----")
print(tags.head().to_csv(index=False))

print("----- links.csv -----")
print(links.head().to_csv(index=False))

import pandas as pd

# Load your datasets
movies = pd.read_csv('/content/movies.csv')
tags = pd.read_csv('/content/genome-tags.csv')
links = pd.read_csv('/content/links.csv')

# Drop NaN values
movies_clean = movies.dropna()
tags_clean = tags.dropna()
links_clean = links.dropna()

# Reset index
movies_clean.reset_index(drop=True, inplace=True)
tags_clean.reset_index(drop=True, inplace=True)
links_clean.reset_index(drop=True, inplace=True)

# Show NaN summary (should be all 0s now)
print("\nðŸ§¹ NaN Value Summary After Cleaning:\n")
print("Movies NaN Count:\n", movies_clean.isna().sum())
print("\nTags NaN Count:\n", tags_clean.isna().sum())
print("\nLinks NaN Count:\n", links_clean.isna().sum())

# Count genre frequency
genre_counts = movies_clean['genres'].str.split('|').explode().value_counts()

print("ðŸŽ¥ Top Genres:")
print(genre_counts.head(10))

pip install tabulate

import pandas as pd
from tabulate import tabulate

# Load and clean the movie dataset
movies = pd.read_csv('/content/movies.csv')
movies_clean = movies.dropna()
movies_clean['movieId'] = movies_clean['movieId'].astype(int)

# Simulated user genre preferences
user_preferred_genres = ['Action', 'Thriller', 'Sci-Fi']

# Filter movies that contain at least one preferred genre
def has_preferred_genre(genres):
    return any(genre in genres for genre in user_preferred_genres)

# Apply filter
recommended = movies_clean[movies_clean['genres'].apply(has_preferred_genre)]

# Optional: score movies by number of preferred genres matched
recommended['score'] = recommended['genres'].apply(
    lambda g: sum(genre in g for genre in user_preferred_genres)
)

# Sort by score
recommended_sorted = recommended.sort_values(by='score', ascending=False)

# Show top recommendations
top_recommendations = recommended_sorted[['title', 'genres', 'score']].head(10)

# Display in table format
print("\nðŸŽ¯ Top Movie Recommendations Based on Preferred Genres:\n")
print(tabulate(top_recommendations, headers='keys', tablefmt='fancy_grid'))

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Load the datasets
movies = pd.read_csv('/content/movies.csv')
tags = pd.read_csv('/content/genome-tags.csv')
links = pd.read_csv('/content/links.csv')

# --- Data Exploration ---

# 1. Basic Information
print("Movies Dataset:")
print(movies.info())  # Get data types, non-null counts
print(movies.describe())  # Summary statistics

# 2. Genre Analysis
genre_counts = movies['genres'].str.split('|').explode().value_counts()
print("\nTop 10 Genres:")
print(genre_counts.head(10))

plt.figure(figsize=(12, 6))
genre_counts.head(10).plot(kind='bar')
plt.title('Top 10 Movie Genres')
plt.xlabel('Genre')
plt.ylabel('Count')
plt.xticks(rotation=45, ha='right')
plt.show()  # Display the plot


# 3. Movie Release Year Distribution
movies['year'] = movies['title'].str.extract(r'\((\d{4})\)')  # Extract year
movies['year'] = pd.to_numeric(movies['year'], errors='coerce')
plt.figure(figsize=(10, 5))
sns.histplot(movies['year'], bins=30)
plt.title('Movie Release Year Distribution')
plt.xlabel('Year')
plt.ylabel('Count')
plt.show()  # Display the plot

# 4. Correlation Analysis (if applicable)
# Assuming you have numerical features:
# correlation_matrix = movies.corr()
# sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm')
# plt.title('Correlation Matrix')
# plt.show()

# --- Further Exploration ---
# You can explore other aspects like:
# - Tag analysis (using the '